name: BE CD for Dev
on:
  push:
    branches: [ "dev"]

permissions:
  contents: read

jobs:
  build-and-docker-operations:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.generate_tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v4
      - name: JDK 17 setting
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Create application-prod.yml from base64
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > ./src/main/resources/application-prod.yml

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build JAR
        run: ./gradlew bootjar

      - name: Generate Unique Tag
        id: generate_tag
        run: echo "::set-output name=tag::$(echo $GITHUB_SHA | cut -c1-7)"

      - name: Build image
        run: |
          docker build \
            --build-arg ACTIVE_PROFILE=prod \
            -f docker/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DEV_DOCKERHUB_REPOSITORY_NAME }}:${{ steps.generate_tag.outputs.tag }} .

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DEV_DOCKERHUB_REPOSITORY_NAME }}:${{ steps.generate_tag.outputs.tag }}

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Start SSH Tunnel
        run: |
          nohup ssh -N -L 3306:${{ secrets.RDS_ENDPOINT }}:3306 ubuntu@${{ secrets.EC2_HOST }} -i ~/.ssh/id_rsa &
          sleep 5 

  deploy:
    needs: build-and-docker-operations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy Docker files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: "ubuntu"
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          source: "docker/docker-compose.yml,docker/scripts/docker-install.sh,docker/nginx/default.conf,docker/nginx/Dockerfile-nginx"
          target: 'compose'
          rm: true

      - name: SSH remote and Run Docker Compose
        uses: appleboy/ssh-action@master
        env:
          MYSQL_DB_NAME: ${{ secrets.MYSQL_DB_NAME }}
          MYSQL_DB_USERNAME: ${{ secrets.MYSQL_DB_USERNAME }}
          MYSQL_DB_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
          IMAGE_TAG: ${{ needs.build-and-docker-operations.outputs.image_tag }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_REPOSITORY_NAME: ${{ secrets.DOCKERHUB_REPOSITORY_NAME }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: "ubuntu"
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          envs: MYSQL_DB_NAME,MYSQL_DB_USERNAME,MYSQL_DB_PASSWORD,IMAGE_TAG,DOCKERHUB_USERNAME,DOCKERHUB_REPOSITORY_NAME,RDS_ENDPOINT
          script: |
            cd compose/docker/
            sudo touch .env
            sudo echo "
            MYSQL_DB_NAME=$MYSQL_DB_NAME
            MYSQL_DB_USERNAME=$MYSQL_DB_USERNAME
            MYSQL_DB_PASSWORD=$MYSQL_DB_PASSWORD
            IMAGE_TAG=$IMAGE_TAG
            RDS_ENDPOINT=$RDS_ENDPOINT
            DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
            DOCKERHUB_REPOSITORY_NAME=$DOCKERHUB_REPOSITORY_NAME" | sudo tee .env
            sh ./scripts/docker-install.sh
            sudo docker pull $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY_NAME:$IMAGE_TAG
            sudo docker-compose down
            sudo docker-compose up -d
